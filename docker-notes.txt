Docker Udemy Notlar
=========================
genel:
- windows docker engine'i küçük bir linux sistemi kurup onun üzerinde çalıştırıyor.
- nerde durduğu (resgistry veya docker hub)/imaj repository'si:tag
	-docker.io/sceylan/todoapp:latest

bölüm1:
container sanal makine farkı:
	- sanal makine bilgisayarı sanallaştırır container ise uygulamayı sanallaştırır.
	- sanal makinelere kıyasla daha hafiftir ve çok daha hızlı başlar.
	- uygulama taşınabilirliği açısından container daha uygun bir teknolojidir.
bölüm 3:
	- imajda birden fazla uygulama çalıştırabiliriz ama 1 adet ana uygulama çalışır.
	- "docker container exec -it websunucu sh" 
		- buradaki -it =>--interactive --tty : interaktif modda bağlan ve terminal bağlantısı kur.
	- cmd veya entrypoint ile girdiğimiz uygulama pid 1 ile çalışır ve docker sürekli bu uygulamayı gözler bu uygulama çalıştığı sürece container çalışır.
	- Docker imajı dediğimiz şey bir temel linux sistemini alıp üzerine yaptığımız her değişikliğin ayrı bir dosya katmanı olarak tutulduğu en sonunda bütün bu katmanların sanki bir bütünmüş gibi çalışmasının sağlandığı docker objesidir. 
volume:
	- docker volume create ilkvolume
		- docker container run -v ilkvolume:/myapp_folder alpine : klasör yoksa otomatik yaratılıyor.
bölüm 4:
network:
	- bridge: varsayılan network driver'dır. 
		- default bridge'de olmayan bir özellik : kendi oluşturduğumuz bridge network'lerinde dns hizmeti vardır. Containerlar arası isimleri ile ulaşabiliriz.
		- default bridge network'te network bağlantısını kesemeyiz ama kullanıcı tanımlı bridge network'te runtime'da başka networke bağlanabiliyoruz veya bağlantı kesebiliyoruz.
	- host: bridge üzerine bağlı olduğu sistemin direk network ağ altyapısını kullanır. izolasyon yoktur.
	- macvlan:
	- none: container hiçbir şekilde ağ bağlantısı olmasın dersen.
	- overlay: 5 farklı sunucuda çalışan container'ların aynı ağda çalışıyormuş gibi çalışması istendiğinde.
	- container run -p 8080:5555 8080 : host yani pc local ağ , 5555 ise docker içi container port numarası
bölüm 5:
ADD ve COPY - ADD COPY ile bire bir aynı işi yapar. Bunun yanında COPY'nin yapamadığı 2 iş yapar:
	- ADD bir tar dosyası kopyaladığında sıkıştırılmış olan dosyayı açarak kopyalar.
	- COPY sadece sistemdeki dosyaları kopyalar ADD ise uzak bir lokasyondan örneğin bir web sitesinden kopyalama yapabilmemizi sağlar.


ENTRYPOINT ve CMD:
	- CMD ile aynı anda oluşturulursa ENTRYPOINT'e parametre olarak girer.
	- hem ENTRYPOINT hem de CMD varsa CMD talimatları parametre olarak ENTRYPOINT'e eklenir.

CMD :
	- eğer biz başka komut girmediysek container ayağa kalktığında çalıştırılacak uygulamanın yazıldığı yer.
	- container çalıştırılırken runtime'da override edilebilir ve başka komut çalıştırılabilir.

ENTRYPOINT:
	- CMD ile birebir aynı işi yapar.
	- CMD'den farkı ENTRYPOINT runtime'da değiştirilmez.
	
Exec Form:
	- komut: CMD["java","app"]
	- bu form'da docker herhangi bir shell çalıştırmaz.
	- bu form'da herhangi bir shell çalışmadığı için environment variable'lara erişemezler.
	- ENTRYPOINT ve CMD beraber kullanılacaksa Exec form kullanılmalıdır. 
	- Shell formu kullanıldığında CMD'deki komutlar ENTRYPOINT'e aktarılmaz.
Shell Form:
	- komut: CMD java app
	- shell açılarak çalıştırılır ve process id PID = 1 olarak bu komutla başlar.
	- ENTRYPOINT ve CMD beraber kullanılacaksa Exec form kullanılmalıdır. 
	- Shell formu kullanıldığında CMD'deki komutlar ENTRYPOINT'e aktarılmaz.
	
	
